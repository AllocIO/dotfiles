set nocompatible              " be iMproved, required

" load plugins from plug
source ~/.vim/plugins.vim

" ==========================================================
" General Settings
" ==========================================================

let mapleader=","
let g:mapleader=","

" ==========================================================
" Basic Settings
" ==========================================================
syntax on " syntax highlighing
filetype on " try to detect filetypes
filetype plugin indent on " enable loading indent file for filetype
set number " Display line number on current row
set relativenumber " Display relative line numbers
set numberwidth=5
set title " show title in console title bar
set wildmenu " Menu completion in command mode on <Tab>
set wildmode=list:longest " <Tab> cycles 

" don't bell or blink
set noerrorbells
set visualbell
set vb t_vb=

" Ignore these files when completing
set wildignore+=*.o,*.obj,.git,*.pyc
set wildignore+=eggs/**
set wildignore+=*.egg-info/**

" Disable the colorcolumn when switching modes. Make sure this is the
" first autocmd for the filetype here
"autocmd FileType * setlocal colorcolumn=0

""" Moving Around/Editing
set cursorline " have a line indicate the cursor location
set ruler " show the cursor position all the time
set nostartofline " Avoid moving cursor to BOL when jumping around
set virtualedit=block " Let cursor move past the last char in <C-v> mode
set scrolloff=3 " Keep 3 context lines above and below the cursor
set backspace=indent,eol,start " Allow backspacing over autoindent, EOL, and BOL
set showmatch " Briefly jump to a paren once it's balanced
set mat=2 " How long to blink

" Text drawing
set wrap " Wrap text
set wrapmargin=8
set linebreak " don't wrap textin the middle of a word
set showbreak=...
"set formatoptions=tcroql " Setting text and comment formatting to auto
set textwidth=120 " Lines are automatically wrapped after 120 columns

""" Tab control
set autoindent " always set autoindenting on
set smartindent " use smart indent if there is no indent file
set tabstop=4 " <tab> inserts 4 spaces
set shiftwidth=4 " but an indent level is 2 spaces wide.
set softtabstop=4 " <BS> over an autoindent deletes both spaces.
set noexpandtab " Use tabs as default. Set under language specific settings.
set shiftround " rounds indent to a multiple of shiftwidth

""" Reading/Writing
"set autowrite " Stop complaining about unsaved buffers
"set autowriteall "
set autoread " Don't automatically re-read changed files.
"set modeline " Allow vim options to be embedded in files;
"set modelines=5 " they must be within the first or last 5 lines.

""" Messages, Info, Status
set ls=2 " allways show status line
set showcmd " Show incomplete normal mode commands as I type.
set report=0 " : commands always print changed line count.
" set shortmess+=a " Use [+]/[RO]/[w] for modified/readonly/written.
" set laststatus=2 " Always show statusline, even if only 1 window.

""" Searching and Patterns
set ignorecase " Default to using case insensitive searches,
set smartcase " unless uppercase letters are used in the regex.
set hlsearch " Highlight searches by default.
set incsearch " Incrementally search while typing a /regex
set magic " Regex fix

" Set theme
"set encoding=utf8
let base16colorspace=256  " Access colors present in 256 colorspace
set t_Co=256 " Explicitly tell vim that the terminal supports 256 colors
colorscheme base16-eighties
set background=dark

" ==========================================================
" Bindings
" ==========================================================

" Set working directory
nnoremap <leader>. :lcd %:p:h<CR>

"sudo write this
cmap W! w !sudo tee % >/dev/null

"Reload Vimrc
map <silent> <leader>V :source ~/.vimrc<CR>:filetype detect<CR>:exe ":echo 'vimrc reloaded'"<CR>

" Close the current buffer
noremap <C-x> :q<cr>

" open/close the quickfix window
nmap <leader>c :copen<CR>
nmap <leader>cc :cclose<CR>

" for when we forget to use sudo to open/edit a file
cmap w!! w !sudo tee % >/dev/null

" ctrl-jklm changes to that split
map <c-j> <c-w>j
map <c-k> <c-w>k
map <c-l> <c-w>l
map <c-h> <c-w>h

" and lets make these all work in insert mode too ( <C-O> makes next cmd
" happen as if in command mode )
imap <C-W> <C-O><C-W>

" Copy/Paste from clipboard
set clipboard=unnamedplus " Set to system clipboard
map Y y$
"map <leader>c "*y
"map <leader>p "+p

" " Quit window on <leader>q
nnoremap <leader>q :q<CR>

" hide matches on <leader>space
nnoremap <leader><space> :nohlsearch<cr>

" Remove trailing whitespace on <leader>S
nnoremap <leader>S :%s/\s\+$//<cr>:let @/=''<CR>

" Select the item in the list with enter
map <C-space> :bn <CR>
map <C-M-space> :bp <CR>


"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" => Files, backups, and undo
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

"set nobackup
"set nowritebackup
"set noswapfile
set backupdir=~/.vim-tmp,~/.tmp,~/tmp,/var/tmp,/tmp
set directory=~/.vim-tmp,~/.tmp,~/tmp,/var/tmp,/tmp

if exists("+undofile")
" " undofile - This allows you to use undos after exiting and restarting
" " This, like swap and backups, uses .vim-undo first, then ~/.vim/undo
" " :help undo-persistence
" " This is only present in 7.3+
	if isdirectory($HOME . '/.vim/undo') == 0
		:silent !mkdir -p ~/.vim/undo > /dev/null 2>&1
	endif
	set undodir=./.vim-undo//
	set undodir+=~/.vim/undo//
	set undofile
endif

" ==========================================================
" Plugin Settings
" ==========================================================

" Load the Gundo window
map <leader>g :GundoToggle<CR>

" ==========================================================
" Python Settings
" ==========================================================

"au FileType python setlocal formatprg=autopep8\ -

